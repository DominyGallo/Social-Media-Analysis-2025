{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"oVjso6vBYbfa","executionInfo":{"status":"ok","timestamp":1746604357100,"user_tz":-120,"elapsed":22354,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"}}},"outputs":[],"source":["## load libraries\n","import spacy\n","from tqdm import tqdm\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import MultiLabelBinarizer\n","\n","#!python3 -m spacy download en_core_web_sm"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42840,"status":"ok","timestamp":1746604408973,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"h_J78vGrRSB_","outputId":"ffe21723-182f-472f-ad51-4ef96371d624"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":116211,"status":"ok","timestamp":1746604527700,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"2FdbqWgj6Mv-","outputId":"506ec55f-45cc-4c3b-a201-acae6710c7a4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting bertopic\n","  Downloading bertopic-0.17.0-py3-none-any.whl.metadata (23 kB)\n","Requirement already satisfied: hdbscan>=0.8.29 in /usr/local/lib/python3.11/dist-packages (from bertopic) (0.8.40)\n","Requirement already satisfied: numpy>=1.20.0 in /usr/local/lib/python3.11/dist-packages (from bertopic) (2.0.2)\n","Requirement already satisfied: pandas>=1.1.5 in /usr/local/lib/python3.11/dist-packages (from bertopic) (2.2.2)\n","Requirement already satisfied: plotly>=4.7.0 in /usr/local/lib/python3.11/dist-packages (from bertopic) (5.24.1)\n","Requirement already satisfied: scikit-learn>=1.0 in /usr/local/lib/python3.11/dist-packages (from bertopic) (1.6.1)\n","Requirement already satisfied: sentence-transformers>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from bertopic) (3.4.1)\n","Requirement already satisfied: tqdm>=4.41.1 in /usr/local/lib/python3.11/dist-packages (from bertopic) (4.67.1)\n","Requirement already satisfied: umap-learn>=0.5.0 in /usr/local/lib/python3.11/dist-packages (from bertopic) (0.5.7)\n","Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.11/dist-packages (from hdbscan>=0.8.29->bertopic) (1.15.2)\n","Requirement already satisfied: joblib>=1.0 in /usr/local/lib/python3.11/dist-packages (from hdbscan>=0.8.29->bertopic) (1.4.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1.5->bertopic) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1.5->bertopic) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1.5->bertopic) (2025.2)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly>=4.7.0->bertopic) (9.1.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from plotly>=4.7.0->bertopic) (24.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0->bertopic) (3.6.0)\n","Requirement already satisfied: transformers<5.0.0,>=4.41.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers>=0.4.1->bertopic) (4.51.3)\n","Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers>=0.4.1->bertopic) (2.6.0+cu124)\n","Requirement already satisfied: huggingface-hub>=0.20.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers>=0.4.1->bertopic) (0.30.2)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from sentence-transformers>=0.4.1->bertopic) (11.2.1)\n","Requirement already satisfied: numba>=0.51.2 in /usr/local/lib/python3.11/dist-packages (from umap-learn>=0.5.0->bertopic) (0.60.0)\n","Requirement already satisfied: pynndescent>=0.5 in /usr/local/lib/python3.11/dist-packages (from umap-learn>=0.5.0->bertopic) (0.5.13)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers>=0.4.1->bertopic) (3.18.0)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers>=0.4.1->bertopic) (2025.3.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers>=0.4.1->bertopic) (6.0.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers>=0.4.1->bertopic) (2.32.3)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers>=0.4.1->bertopic) (4.13.2)\n","Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.51.2->umap-learn>=0.5.0->bertopic) (0.43.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.1.5->bertopic) (1.17.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic) (3.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic) (3.1.6)\n","Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cublas-cu12==12.4.5.8 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cufft-cu12==11.2.1.3 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-curand-cu12==10.3.5.147 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic) (0.6.2)\n","Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic) (2.21.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic) (12.4.127)\n","Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic)\n","  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic) (3.2.0)\n","Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers>=0.4.1->bertopic) (1.13.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=1.11.0->sentence-transformers>=0.4.1->bertopic) (1.3.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers>=0.4.1->bertopic) (2024.11.6)\n","Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers>=0.4.1->bertopic) (0.21.1)\n","Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers>=0.4.1->bertopic) (0.5.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=1.11.0->sentence-transformers>=0.4.1->bertopic) (3.0.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers>=0.4.1->bertopic) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers>=0.4.1->bertopic) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers>=0.4.1->bertopic) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence-transformers>=0.4.1->bertopic) (2025.4.26)\n","Downloading bertopic-0.17.0-py3-none-any.whl (150 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m150.6/150.6 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m75.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m60.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m42.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m1.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m13.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m63.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, bertopic\n","  Attempting uninstall: nvidia-nvjitlink-cu12\n","    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n","    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n","      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n","  Attempting uninstall: nvidia-curand-cu12\n","    Found existing installation: nvidia-curand-cu12 10.3.6.82\n","    Uninstalling nvidia-curand-cu12-10.3.6.82:\n","      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n","  Attempting uninstall: nvidia-cufft-cu12\n","    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n","    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n","      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n","  Attempting uninstall: nvidia-cuda-runtime-cu12\n","    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n","    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n","  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n","    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n","    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n","  Attempting uninstall: nvidia-cuda-cupti-cu12\n","    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n","    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n","  Attempting uninstall: nvidia-cublas-cu12\n","    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n","    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n","      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n","  Attempting uninstall: nvidia-cusparse-cu12\n","    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n","    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n","      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n","  Attempting uninstall: nvidia-cudnn-cu12\n","    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n","    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n","      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n","  Attempting uninstall: nvidia-cusolver-cu12\n","    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n","    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n","      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n","Successfully installed bertopic-0.17.0 nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127\n"]}],"source":["!pip install bertopic\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"GYsBAxNgZa_K","executionInfo":{"status":"ok","timestamp":1746604814542,"user_tz":-120,"elapsed":277706,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"}}},"outputs":[],"source":["import os\n","\n","# Path to your CSV and folder with text files\n","csv_path = \"/content/drive/Shareddrives/NDC_txts/ndcs - sorted with indicators - All indicators (1) (1).csv\"\n","txt_folder = \"/content/drive/Shareddrives/NDC_txts\"\n","\n","# Load your CSV\n","df = pd.read_csv(csv_path)\n","\n","# Function to read text from file\n","def read_text(filename):\n","    file_path = os.path.join(txt_folder, filename)\n","    try:\n","        with open(file_path, 'r', encoding='utf-8') as f:\n","            return f.read()\n","    except FileNotFoundError:\n","        return None  # or return \"\" if you prefer an empty string\n","\n","# Apply the function to the 'filename' column\n","df[\"text_content\"] = df[\"filename\"].apply(read_text)"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":90,"status":"ok","timestamp":1746604874107,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"6b92JdQzac3i","outputId":"db5db71f-0f2d-41fb-9189-40c76ea71315"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      1 \\n \\n \\n \\n \\n \\n \\nISLAMIC REPUBLIC OF AFGH...\n","1       \\n1\\nALBANIA REVISED NDC \\nALBANIA REVISED ND...\n","2      1 \\n \\n \\n \\n \\n \\n \\nThe People’s Democratic ...\n","3      Third contribution\\ndetermined at the\\nAndorra...\n","4      Nationally Determined Contribution (NDC) of An...\n","                             ...                        \n","189    Vanuatu’s Revised and Enhanced\\n1st Nationally...\n","190    Nationally Determined Contribution\\nNationally...\n","191    SOCIALIST REPUBLIC OF VIET NAM\\nNATIONALLY DET...\n","192    REPUBLIC OF ZAMBIA\\n1.0 Background\\nThis docum...\n","193    ZIMBABWE’S NDC3.0 COUNTRY STATEMENT\\n1ZIMBABWE...\n","Name: text_content, Length: 194, dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text_content</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1 \\n \\n \\n \\n \\n \\n \\nISLAMIC REPUBLIC OF AFGH...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>\\n1\\nALBANIA REVISED NDC \\nALBANIA REVISED ND...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1 \\n \\n \\n \\n \\n \\n \\nThe People’s Democratic ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Third contribution\\ndetermined at the\\nAndorra...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Nationally Determined Contribution (NDC) of An...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>189</th>\n","      <td>Vanuatu’s Revised and Enhanced\\n1st Nationally...</td>\n","    </tr>\n","    <tr>\n","      <th>190</th>\n","      <td>Nationally Determined Contribution\\nNationally...</td>\n","    </tr>\n","    <tr>\n","      <th>191</th>\n","      <td>SOCIALIST REPUBLIC OF VIET NAM\\nNATIONALLY DET...</td>\n","    </tr>\n","    <tr>\n","      <th>192</th>\n","      <td>REPUBLIC OF ZAMBIA\\n1.0 Background\\nThis docum...</td>\n","    </tr>\n","    <tr>\n","      <th>193</th>\n","      <td>ZIMBABWE’S NDC3.0 COUNTRY STATEMENT\\n1ZIMBABWE...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>194 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":6}],"source":["df[\"text_content\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Hh3EMoK9xqj9"},"outputs":[],"source":["## load libraries\n","import spacy\n","from tqdm import tqdm\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import MultiLabelBinarizer\n","\n","#!python3 -m spacy download en_core_web_sm"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":56879,"status":"ok","timestamp":1746604995897,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"UerTTTZayW2x","outputId":"ef6cd2d8-3e97-4de8-8434-a7857e07483f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: sentence_transformers in /usr/local/lib/python3.11/dist-packages (3.4.1)\n","Requirement already satisfied: transformers<5.0.0,>=4.41.0 in /usr/local/lib/python3.11/dist-packages (from sentence_transformers) (4.51.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from sentence_transformers) (4.67.1)\n","Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from sentence_transformers) (2.6.0+cu124)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from sentence_transformers) (1.6.1)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from sentence_transformers) (1.15.2)\n","Requirement already satisfied: huggingface-hub>=0.20.0 in /usr/local/lib/python3.11/dist-packages (from sentence_transformers) (0.30.2)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from sentence_transformers) (11.2.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (3.18.0)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (2025.3.2)\n","Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (24.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (6.0.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (2.32.3)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence_transformers) (4.13.2)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (3.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (3.1.6)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (12.4.127)\n","Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (12.4.127)\n","Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (12.4.127)\n","Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (9.1.0.70)\n","Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (12.4.5.8)\n","Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (11.2.1.3)\n","Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (10.3.5.147)\n","Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (11.6.1.9)\n","Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (12.3.1.170)\n","Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (0.6.2)\n","Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (2.21.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (12.4.127)\n","Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (12.4.127)\n","Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (3.2.0)\n","Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence_transformers) (1.13.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=1.11.0->sentence_transformers) (1.3.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (2.0.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (2024.11.6)\n","Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (0.21.1)\n","Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence_transformers) (0.5.3)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->sentence_transformers) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->sentence_transformers) (3.6.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=1.11.0->sentence_transformers) (3.0.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.20.0->sentence_transformers) (2025.4.26)\n"]}],"source":["# ... (your previous code) ...\n","\n","!pip install sentence_transformers\n","from sentence_transformers import SentenceTransformer\n","from bertopic import BERTopic\n","from umap import UMAP\n","from hdbscan import HDBSCAN\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","import os\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","referenced_widgets":["da71ada1c1e14d7fb08d2e9c43d7757e"]},"executionInfo":{"elapsed":61663,"status":"error","timestamp":1746604185934,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"ejmEW2V7xf6V","outputId":"7910fcb3-3cbc-4daa-e4f2-7c594ae307a9"},"outputs":[{"output_type":"display_data","data":{"text/plain":["Batches:   0%|          | 0/7 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"da71ada1c1e14d7fb08d2e9c43d7757e"}},"metadata":{}},{"output_type":"error","ename":"NameError","evalue":"name 'umap_model' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-ebd5126659a5>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m topic_model = BERTopic(\n\u001b[1;32m     18\u001b[0m     \u001b[0membedding_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     \u001b[0mumap_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mumap_model\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m     \u001b[0mhdbscan_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhdbscan_model\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0mvectorizer_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvectorizer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'umap_model' is not defined"]}],"source":["\n","# Load all documents from the txt files in the folder\n","text_folder = \"/content/drive/Shareddrives/NDC_txts\"\n","documents = []  # Initialize an empty list to store your documents\n","for filename in os.listdir(text_folder):\n","    if filename.endswith(\".txt\"):\n","        with open(os.path.join(text_folder, filename), \"r\", encoding=\"utf-8\") as f:\n","            documents.append(f.read())  # Append the content of each file to the list\n","\n","# Now 'documents' contains all the text from the .txt files\n","# Proceed to generate the document_vectors using your model\n","\n","# Ensure embeddings are generated from the 'documents' list\n","model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n","document_vectors = model.encode(documents, show_progress_bar=True)\n","\n","# Train our topic model with BERTopic\n","topic_model = BERTopic(\n","    embedding_model=model,\n","    umap_model=umap_model,\n","    hdbscan_model=hdbscan_model,\n","    vectorizer_model=vectorizer,\n","    verbose=True\n",").fit(documents, document_vectors)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":560,"referenced_widgets":["26be4a3cb9c2483d94407347fc590fdf","5ed827a9b0f641919bf8aa3319177c61","9c5a7bab86544f13a8ae9229316f2ddc","18c56c2eb46842d8bd9f71013f1c0040","0482fd72b7c045aab9b041d077c67a02","8cec8a028b13472fb55e277dcef57ded","eb9cc67bbf3a4e22ac15d86a14dc6813","11d9e5866b7d45e0ac817a4ae3940aae","5c88223dc9854806974c94ca24de987b","e0c676c6a7a3480487fc4498e5145b25","c8ab52fe01c8441b856696e27b1a9735","730aa7e50c5f43ed97c675e1427eb367"]},"executionInfo":{"elapsed":144462,"status":"ok","timestamp":1745827435090,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"k73IXHDazW3R","outputId":"f2c6371e-f624-44b7-d94e-7b85285685bf"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"26be4a3cb9c2483d94407347fc590fdf","version_major":2,"version_minor":0},"text/plain":["modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"5ed827a9b0f641919bf8aa3319177c61","version_major":2,"version_minor":0},"text/plain":["config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9c5a7bab86544f13a8ae9229316f2ddc","version_major":2,"version_minor":0},"text/plain":["README.md:   0%|          | 0.00/10.5k [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"18c56c2eb46842d8bd9f71013f1c0040","version_major":2,"version_minor":0},"text/plain":["sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"0482fd72b7c045aab9b041d077c67a02","version_major":2,"version_minor":0},"text/plain":["config.json:   0%|          | 0.00/612 [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n","WARNING:huggingface_hub.file_download:Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8cec8a028b13472fb55e277dcef57ded","version_major":2,"version_minor":0},"text/plain":["model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"eb9cc67bbf3a4e22ac15d86a14dc6813","version_major":2,"version_minor":0},"text/plain":["tokenizer_config.json:   0%|          | 0.00/350 [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"11d9e5866b7d45e0ac817a4ae3940aae","version_major":2,"version_minor":0},"text/plain":["vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"5c88223dc9854806974c94ca24de987b","version_major":2,"version_minor":0},"text/plain":["tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e0c676c6a7a3480487fc4498e5145b25","version_major":2,"version_minor":0},"text/plain":["special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"c8ab52fe01c8441b856696e27b1a9735","version_major":2,"version_minor":0},"text/plain":["config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"730aa7e50c5f43ed97c675e1427eb367","version_major":2,"version_minor":0},"text/plain":["Batches:   0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["2025-04-28 08:03:39,799 - BERTopic - Dimensionality - Fitting the dimensionality reduction algorithm\n","2025-04-28 08:03:49,575 - BERTopic - Dimensionality - Completed ✓\n","2025-04-28 08:03:49,576 - BERTopic - Cluster - Start clustering the reduced embeddings\n","2025-04-28 08:03:49,589 - BERTopic - Cluster - Completed ✓\n","2025-04-28 08:03:49,602 - BERTopic - Representation - Fine-tuning topics using representation models.\n","2025-04-28 08:03:52,629 - BERTopic - Representation - Completed ✓\n"]}],"source":["#attempt 1. not good result\n","# Load all documents from the txt files in the folder\n","import os\n","from sentence_transformers import SentenceTransformer\n","from bertopic import BERTopic\n","from umap import UMAP\n","from hdbscan import HDBSCAN\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","text_folder = \"/content/drive/Shareddrives/NDC_txts\"\n","documents = []  # Initialize an empty list to store your documents\n","for filename in os.listdir(text_folder):\n","    if filename.endswith(\".txt\"):\n","        with open(os.path.join(text_folder, filename), \"r\", encoding=\"utf-8\") as f:\n","            documents.append(f.read())  # Append the content of each file to the list\n","\n","# Now 'documents' contains all the text from the .txt files\n","# Proceed to generate the document_vectors using your model\n","\n","# Ensure embeddings are generated from the 'documents' list\n","model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n","document_vectors = model.encode(documents, show_progress_bar=True)\n","\n","# Define UMAP, HDBSCAN, and vectorizer before using them in BERTopic\n","umap_model = UMAP(n_neighbors=15, n_components=5, min_dist=0.01, metric='cosine', random_state=42)\n","hdbscan_model = HDBSCAN(min_cluster_size=70, metric='euclidean', cluster_selection_method='eom')\n","vectorizer = CountVectorizer(stop_words='english')\n","\n","# Train our topic model with BERTopic\n","topic_model = BERTopic(\n","    embedding_model=model,\n","    umap_model=umap_model,\n","    hdbscan_model=hdbscan_model,\n","    vectorizer_model=vectorizer,\n","    verbose=True\n",").fit(documents, document_vectors)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":173,"referenced_widgets":["e3e7ab2faaf54abfbae56bd132926960"]},"executionInfo":{"elapsed":67298,"status":"ok","timestamp":1745828234596,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"U9gE-jdwdOEX","outputId":"49b3e2ce-663d-428e-8b65-a40f49447d89"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3e7ab2faaf54abfbae56bd132926960","version_major":2,"version_minor":0},"text/plain":["Batches:   0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["2025-04-28 08:17:06,894 - BERTopic - Dimensionality - Fitting the dimensionality reduction algorithm\n","2025-04-28 08:17:07,365 - BERTopic - Dimensionality - Completed ✓\n","2025-04-28 08:17:07,366 - BERTopic - Cluster - Start clustering the reduced embeddings\n","2025-04-28 08:17:07,375 - BERTopic - Cluster - Completed ✓\n","2025-04-28 08:17:07,380 - BERTopic - Representation - Fine-tuning topics using representation models.\n","2025-04-28 08:17:11,605 - BERTopic - Representation - Completed ✓\n"]}],"source":["#attempt 2. kind of works\n","# Load all documents from the txt files in the folder\n","import os\n","from sentence_transformers import SentenceTransformer\n","from bertopic import BERTopic\n","from umap import UMAP\n","from hdbscan import HDBSCAN\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","text_folder = \"/content/drive/Shareddrives/NDC_txts\"\n","documents = []  # Initialize an empty list to store your documents\n","for filename in os.listdir(text_folder):\n","    if filename.endswith(\".txt\"):\n","        with open(os.path.join(text_folder, filename), \"r\", encoding=\"utf-8\") as f:\n","            documents.append(f.read())  # Append the content of each file to the list\n","\n","# Now 'documents' contains all the text from the .txt files\n","# Proceed to generate the document_vectors using your model\n","\n","# Ensure embeddings are generated from the 'documents' list\n","model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n","document_vectors = model.encode(documents, show_progress_bar=True)\n","\n","# Define UMAP, HDBSCAN, and vectorizer before using them in BERTopic\n","umap_model = UMAP(n_neighbors=10, n_components=5, min_dist=0.0, metric='cosine', random_state=42)\n","hdbscan_model = HDBSCAN(min_cluster_size=15, min_samples=5, metric='euclidean', cluster_selection_method='eom')\n","vectorizer = CountVectorizer(stop_words='english')\n","\n","# Train our topic model with BERTopic\n","topic_model = BERTopic(\n","    embedding_model=model,\n","    umap_model=umap_model,\n","    hdbscan_model=hdbscan_model,\n","    vectorizer_model=vectorizer,\n","    verbose=True\n",").fit(documents, document_vectors)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1745750168811,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"SsMW2HRd0R8x","outputId":"419cff92-a522-4119-df03-150154b17734"},"outputs":[{"name":"stdout","output_type":"stream","text":["                                            Document\n","0   \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\nThe Bahamas \\...\n","1   \\n \\n \\n \\n1 \\n \\n \\nNATIONALLY DETERMINED CO...\n","2   \\n \\n1 \\n \\n \\n \\n \\n \\n \\n \\nNationally Dete...\n","3  In accordance with decision No. 1/CP.21, parag...\n","4   \\n \\n \\n \\nTable of Contents \\nIntroduction ....\n"]}],"source":["# prompt: can I see the document with all of the text content as a table? Only the first few documents\n","\n","import pandas as pd\n","\n","# Assuming 'documents' list is already populated from your previous code\n","# Create a DataFrame with the document content\n","df = pd.DataFrame({'Document': documents})\n","\n","# Display the first few rows of the DataFrame as a table\n","print(df.head())\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ShCM6QhT0ce7"},"outputs":[],"source":["# prompt: Could you help me to topic model the words used in this document, while omitting stop words? I would like to create 20 bar charts with the top 10 words associated with the topic\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Get the topic info\n","topic_info = topic_model.get_topic_info()\n","\n","# Iterate through topics and create bar charts\n","for topic in range(min(20, len(topic_info) - 1)):  # Limit to 20 topics or available topics\n","    # Get the top 10 words for the current topic\n","    top_words = topic_model.get_topic(topic)[:10]\n","\n","    # Extract words and probabilities\n","    words, probabilities = zip(*top_words)\n","\n","    # Create the bar chart\n","    plt.figure(figsize=(10, 6))\n","    sns.barplot(x=probabilities, y=words)\n","    plt.title(f\"Top 10 words for Topic {topic}\")\n","    plt.xlabel(\"Probability\")\n","    plt.ylabel(\"Words\")\n","    plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"idEyPn3p0vXe"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","   # Get the topic info\n","topic_info = topic_model.get_topic_info()\n","\n","   # Iterate through topics and create bar charts\n","for topic in range(min(20, len(topic_info) - 1)):  # Limit to 20 topics or available topics\n","       # Get the top 10 words for the current topic\n","       top_words = topic_model.get_topic(topic)[:10]\n","\n","       # Extract words and probabilities\n","       words, probabilities = zip(*top_words)\n","\n","       # Create the bar chart\n","       plt.figure(figsize=(10, 6))\n","       sns.barplot(x=probabilities, y=words)\n","       plt.title(f\"Top 10 words for Topic {topic}\")\n","       plt.xlabel(\"Probability\")\n","       plt.ylabel(\"Words\")\n","\n","plt.show() # Move plt.show() outside the loop"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":302},"collapsed":true,"executionInfo":{"elapsed":83,"status":"ok","timestamp":1745828247663,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"r3bzHZA21Az3","outputId":"dea14db9-5858-48fa-ce7b-d1d8bf2a9d13"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"topic_info\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Topic\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50,\n        \"min\": 30,\n        \"max\": 123,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          123,\n          41,\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"0_climate_change_national_emissions\",\n          \"1_cid_24_13_15\",\n          \"2_eu_european_member_emissions\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Representation\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Representative_Docs\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"topic_info"},"text/html":["\n","  <div id=\"df-4c213f06-cfed-42c2-9e84-1c76a425888c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Topic</th>\n","      <th>Count</th>\n","      <th>Name</th>\n","      <th>Representation</th>\n","      <th>Representative_Docs</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>123</td>\n","      <td>0_climate_change_national_emissions</td>\n","      <td>[climate, change, national, emissions, adaptat...</td>\n","      <td>[UPDATE NDC COLOMBIA - 2020\\n \\n \\n \\n \\n \\n \\...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>41</td>\n","      <td>1_cid_24_13_15</td>\n","      <td>[cid, 24, 13, 15, 36, 16, 43, 22, 10, 35]</td>\n","      <td>[NATIONALLY DETERMINED CONTRIBUTIONS\\nCONTRIBU...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>2_eu_european_member_emissions</td>\n","      <td>[eu, european, member, emissions, regulation, ...</td>\n","      <td>[ \\n \\n \\n \\n1 \\n \\nUpdate of the \\nNDC of the...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c213f06-cfed-42c2-9e84-1c76a425888c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4c213f06-cfed-42c2-9e84-1c76a425888c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4c213f06-cfed-42c2-9e84-1c76a425888c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-9c7ac353-c7c3-41b5-bd44-e78043fea11d\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9c7ac353-c7c3-41b5-bd44-e78043fea11d')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-9c7ac353-c7c3-41b5-bd44-e78043fea11d button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_c00c7624-0e3b-4d46-9349-75fb66ade683\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('topic_info')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_c00c7624-0e3b-4d46-9349-75fb66ade683 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('topic_info');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["   Topic  Count                                 Name  \\\n","0      0    123  0_climate_change_national_emissions   \n","1      1     41                       1_cid_24_13_15   \n","2      2     30       2_eu_european_member_emissions   \n","\n","                                      Representation  \\\n","0  [climate, change, national, emissions, adaptat...   \n","1          [cid, 24, 13, 15, 36, 16, 43, 22, 10, 35]   \n","2  [eu, european, member, emissions, regulation, ...   \n","\n","                                 Representative_Docs  \n","0  [UPDATE NDC COLOMBIA - 2020\\n \\n \\n \\n \\n \\n \\...  \n","1  [NATIONALLY DETERMINED CONTRIBUTIONS\\nCONTRIBU...  \n","2  [ \\n \\n \\n \\n1 \\n \\nUpdate of the \\nNDC of the...  "]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["# prompt: Can you help me ask it if is able to find any topic words?\n","\n","# Get the topic info\n","topic_info = topic_model.get_topic_info()\n","\n","# Print the topic info DataFrame to see if any topic words are present\n","topic_info\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":795,"status":"ok","timestamp":1745828259031,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"7Qr7q3WjztTb","outputId":"d0602668-71ba-4374-ea18-797e6c78388b"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1000x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# prompt: now can you generate a code to get different barcharts on topics, with 10 words associate per topic?\n","\n","import matplotlib.pyplot as plt\n","\n","# Get the top 10 words for each topic\n","topics = topic_model.get_topic_info()\n","for topic_num in topics[topics[\"Topic\"] != -1][\"Topic\"]:\n","    topic_words = topic_model.get_topic(topic_num)\n","    if topic_words:  # Check if the topic has words\n","        top_words = [word for word, prob in topic_words[:10]]\n","\n","        # Create a bar chart\n","        plt.figure(figsize=(10, 6))  # Adjust figure size as needed\n","        plt.bar(top_words, [prob for word, prob in topic_words[:10]])\n","        plt.xlabel(\"Words\")\n","        plt.ylabel(\"Probability\")\n","        plt.title(f\"Top 10 Words for Topic {topic_num}\")\n","        plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for readability\n","        plt.tight_layout()  # Adjust layout to prevent labels from overlapping\n","        plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"output_embedded_package_id":"1QYCduLGp2appN1KmaUTJGGAOyUlGPSV5","referenced_widgets":["9ffca736b07f4ea1ac91837a2de5a863"]},"executionInfo":{"elapsed":75055,"status":"ok","timestamp":1745829188016,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"11covUjDfXv3","outputId":"207b9c16-231f-4de6-a87e-39b63496c323"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["#attempt 3.\n","# Load all documents from the txt files in the folder\n","import os\n","from sentence_transformers import SentenceTransformer\n","from bertopic import BERTopic\n","from umap import UMAP\n","from hdbscan import HDBSCAN\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","text_folder = \"/content/drive/Shareddrives/NDC_txts\"\n","documents = []  # Initialize an empty list to store your documents\n","for filename in os.listdir(text_folder):\n","    if filename.endswith(\".txt\"):\n","        with open(os.path.join(text_folder, filename), \"r\", encoding=\"utf-8\") as f:\n","            documents.append(f.read())  # Append the content of each file to the list\n","\n","# Now 'documents' contains all the text from the .txt files\n","# Proceed to generate the document_vectors using your model\n","\n","# Ensure embeddings are generated from the 'documents' list\n","model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n","document_vectors = model.encode(documents, show_progress_bar=True)\n","\n","# Define UMAP, HDBSCAN, and vectorizer before using them in BERTopic\n","umap_model = UMAP(n_neighbors=5, n_components=10, min_dist=0.0, metric='cosine', random_state=42)\n","umap_embeddings = umap_model.fit_transform(document_vectors)\n","hdbscan_model = HDBSCAN(min_cluster_size=2, metric='euclidean', cluster_selection_method='eom')\n","cluster_labels = hdbscan_model.fit_predict(umap_embeddings)\n","vectorizer = CountVectorizer(stop_words='english')\n","\n","for documents, label in zip(documents, cluster_labels):\n","  print(f\"Cluster {label}: {documents}\")\n","\n"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iAsRMf2_iTm3","outputId":"5cf702e1-227d-4901-efb4-2b8cb84316c5","executionInfo":{"status":"ok","timestamp":1746605142478,"user_tz":-120,"elapsed":75273,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["Batches:   0%|          | 0/7 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cf5fffdffa90497a9eb04431adda05a0"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["2025-05-07 08:05:31,964 - BERTopic - Dimensionality - Fitting the dimensionality reduction algorithm\n","2025-05-07 08:05:32,439 - BERTopic - Dimensionality - Completed ✓\n","2025-05-07 08:05:32,443 - BERTopic - Cluster - Start clustering the reduced embeddings\n","2025-05-07 08:05:32,459 - BERTopic - Cluster - Completed ✓\n","2025-05-07 08:05:32,472 - BERTopic - Representation - Fine-tuning topics using representation models.\n","2025-05-07 08:05:38,004 - BERTopic - Representation - Completed ✓\n"]}],"source":["#attempt 4.\n","# Load all documents from the txt files in the folder\n","import os\n","from sentence_transformers import SentenceTransformer\n","from bertopic import BERTopic\n","from umap import UMAP\n","from hdbscan import HDBSCAN\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","text_folder = \"/content/drive/Shareddrives/NDC_txts\"\n","documents = []  # Initialize an empty list to store your documents\n","for filename in os.listdir(text_folder):\n","    if filename.endswith(\".txt\"):\n","        with open(os.path.join(text_folder, filename), \"r\", encoding=\"utf-8\") as f:\n","            documents.append(f.read())  # Append the content of each file to the list\n","\n","# Now 'documents' contains all the text from the .txt files\n","# Proceed to generate the document_vectors using your model\n","\n","# Ensure embeddings are generated from the 'documents' list\n","model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n","document_vectors = model.encode(documents, show_progress_bar=True)\n","\n","# Define UMAP, HDBSCAN, and vectorizer before using them in BERTopic\n","umap_model = UMAP(n_neighbors=5, n_components=10, min_dist=0.0, metric='cosine', random_state=42)\n","umap_embeddings = umap_model.fit_transform(document_vectors)\n","hdbscan_model = HDBSCAN(min_cluster_size=2, metric='euclidean', cluster_selection_method='eom')\n","cluster_labels = hdbscan_model.fit_predict(umap_embeddings)\n","vectorizer = CountVectorizer(stop_words='english')\n","\n","topic_model = BERTopic(\n","    embedding_model=model,\n","    umap_model=umap_model,\n","    hdbscan_model=hdbscan_model,\n","    vectorizer_model=vectorizer,\n","    verbose=True\n",").fit(documents, document_vectors)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":356,"status":"ok","timestamp":1745829892614,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"wDaS83FUiJ0I","outputId":"0768311a-45d3-48a0-a658-20accfaa09fe"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"topic_info\",\n  \"rows\": 19,\n  \"fields\": [\n    {\n      \"column\": \"Topic\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": -1,\n        \"max\": 17,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          -1,\n          4,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 3,\n        \"max\": 38,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          4,\n          5,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"-1_sudan_south_climate_uk\",\n          \"4_climate_change_leste_timor\",\n          \"10_malawi_mozambique_ndc_climate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Representation\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Representative_Docs\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"topic_info"},"text/html":["\n","  <div id=\"df-2475cca6-6725-487f-b0f6-edba48e9694b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Topic</th>\n","      <th>Count</th>\n","      <th>Name</th>\n","      <th>Representation</th>\n","      <th>Representative_Docs</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-1</td>\n","      <td>12</td>\n","      <td>-1_sudan_south_climate_uk</td>\n","      <td>[sudan, south, climate, uk, emissions, sector,...</td>\n","      <td>[ \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>38</td>\n","      <td>0_cid_24_13_15</td>\n","      <td>[cid, 24, 13, 15, 36, 16, 43, 22, 35, 10]</td>\n","      <td>[DEMOCRATIC REPUBLIC OF CONGO\\nVice-Primacy\\n ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>1_eu_european_member_regulation</td>\n","      <td>[eu, european, member, regulation, states, uni...</td>\n","      <td>[ \\n \\n \\n \\n1 \\n \\nUpdate of the \\nNDC of the...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>23</td>\n","      <td>2_climate_ndc_emissions_change</td>\n","      <td>[climate, ndc, emissions, change, national, en...</td>\n","      <td>[REPUBLIC OF SEYCHELLES\\nSeychelles’ Updated N...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3</td>\n","      <td>20</td>\n","      <td>3_climate_change_national_adaptation</td>\n","      <td>[climate, change, national, adaptation, countr...</td>\n","      <td>[Nationally Determined Contribution\\nNationall...</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>4_climate_change_leste_timor</td>\n","      <td>[climate, change, leste, timor, development, n...</td>\n","      <td>[ \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n...</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5</td>\n","      <td>8</td>\n","      <td>5_oman_energy_water_climate</td>\n","      <td>[oman, energy, water, climate, sector, egypt, ...</td>\n","      <td>[0 \\n \\n1 \\n \\n \\n \\n2 \\n \\n \\n  Executive Sum...</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>6_moldova_adaptation_climate_republic</td>\n","      <td>[moldova, adaptation, climate, republic, devel...</td>\n","      <td>[In accordance with decision No. 1/CP.21, para...</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>7_turkmenistan_türkiye_tajikistan_climate</td>\n","      <td>[turkmenistan, türkiye, tajikistan, climate, d...</td>\n","      <td>[2 \\nThe Republic of Uzbekistan, being committ...</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>8</td>\n","      <td>6</td>\n","      <td>8_liberia_climate_2030_ndc</td>\n","      <td>[liberia, climate, 2030, ndc, sector, sierra, ...</td>\n","      <td>[UPDATED NATIONALLY \\nDETERMINED CONTRIBUTION\\...</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>9</td>\n","      <td>5</td>\n","      <td>9_uganda_gabon_mitigation_climate</td>\n","      <td>[uganda, gabon, mitigation, climate, gambia, e...</td>\n","      <td>[1 \\n \\n \\n \\n \\n \\n \\nBotswana’s 2nd Updated ...</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>10_malawi_mozambique_ndc_climate</td>\n","      <td>[malawi, mozambique, ndc, climate, mitigation,...</td>\n","      <td>[Update of the First Nationally  \\nDetermined ...</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>11</td>\n","      <td>5</td>\n","      <td>11_korea_republic_target_montenegro</td>\n","      <td>[korea, republic, target, montenegro, neutrali...</td>\n","      <td>[Nationally Determined Contribution (NDC)\\nof ...</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>12</td>\n","      <td>4</td>\n","      <td>12_canada_emissions_zero_climate</td>\n","      <td>[canada, emissions, zero, climate, carbon, 203...</td>\n","      <td>[Nationally Determined Contribution\\n From MON...</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>13</td>\n","      <td>4</td>\n","      <td>13_singapore_malaysia_japan_thailand</td>\n","      <td>[singapore, malaysia, japan, thailand, emissio...</td>\n","      <td>[MALAYSIA’S UPDATE OF ITS FIRST\\nNATIONALLY DE...</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>14</td>\n","      <td>4</td>\n","      <td>14_myanmar_bissau_climate_guinea</td>\n","      <td>[myanmar, bissau, climate, guinea, ndc, energy...</td>\n","      <td>[Nationally Determined\\nat national level\\nCDN...</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>15</td>\n","      <td>3</td>\n","      <td>15_dominica_antigua_barbuda_climate</td>\n","      <td>[dominica, antigua, barbuda, climate, commonwe...</td>\n","      <td>[REPUBLIC OF THE PHILIPPINES\\nNationally Deter...</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>16</td>\n","      <td>3</td>\n","      <td>16_grenada_jamaica_ndc_tobago</td>\n","      <td>[grenada, jamaica, ndc, tobago, emissions, tri...</td>\n","      <td>[TRINIDAD AND TOBAGO\\nINTENDED NATIONALLY DETE...</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>17</td>\n","      <td>3</td>\n","      <td>17_suriname_cameroon_mauritania_cdn</td>\n","      <td>[suriname, cameroon, mauritania, cdn, national...</td>\n","      <td>[The Republic of Suriname\\nNationally Determin...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2475cca6-6725-487f-b0f6-edba48e9694b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2475cca6-6725-487f-b0f6-edba48e9694b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2475cca6-6725-487f-b0f6-edba48e9694b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-5aed3f78-eb24-47c1-8026-1af2bb4a661c\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5aed3f78-eb24-47c1-8026-1af2bb4a661c')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-5aed3f78-eb24-47c1-8026-1af2bb4a661c button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_06df72c9-d500-44b3-90ae-94a3f2fe0c22\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('topic_info')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_06df72c9-d500-44b3-90ae-94a3f2fe0c22 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('topic_info');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["    Topic  Count                                       Name  \\\n","0      -1     12                  -1_sudan_south_climate_uk   \n","1       0     38                             0_cid_24_13_15   \n","2       1     27            1_eu_european_member_regulation   \n","3       2     23             2_climate_ndc_emissions_change   \n","4       3     20       3_climate_change_national_adaptation   \n","5       4      9               4_climate_change_leste_timor   \n","6       5      8                5_oman_energy_water_climate   \n","7       6      8      6_moldova_adaptation_climate_republic   \n","8       7      7  7_turkmenistan_türkiye_tajikistan_climate   \n","9       8      6                 8_liberia_climate_2030_ndc   \n","10      9      5          9_uganda_gabon_mitigation_climate   \n","11     10      5           10_malawi_mozambique_ndc_climate   \n","12     11      5        11_korea_republic_target_montenegro   \n","13     12      4           12_canada_emissions_zero_climate   \n","14     13      4       13_singapore_malaysia_japan_thailand   \n","15     14      4           14_myanmar_bissau_climate_guinea   \n","16     15      3        15_dominica_antigua_barbuda_climate   \n","17     16      3              16_grenada_jamaica_ndc_tobago   \n","18     17      3        17_suriname_cameroon_mauritania_cdn   \n","\n","                                       Representation  \\\n","0   [sudan, south, climate, uk, emissions, sector,...   \n","1           [cid, 24, 13, 15, 36, 16, 43, 22, 35, 10]   \n","2   [eu, european, member, regulation, states, uni...   \n","3   [climate, ndc, emissions, change, national, en...   \n","4   [climate, change, national, adaptation, countr...   \n","5   [climate, change, leste, timor, development, n...   \n","6   [oman, energy, water, climate, sector, egypt, ...   \n","7   [moldova, adaptation, climate, republic, devel...   \n","8   [turkmenistan, türkiye, tajikistan, climate, d...   \n","9   [liberia, climate, 2030, ndc, sector, sierra, ...   \n","10  [uganda, gabon, mitigation, climate, gambia, e...   \n","11  [malawi, mozambique, ndc, climate, mitigation,...   \n","12  [korea, republic, target, montenegro, neutrali...   \n","13  [canada, emissions, zero, climate, carbon, 203...   \n","14  [singapore, malaysia, japan, thailand, emissio...   \n","15  [myanmar, bissau, climate, guinea, ndc, energy...   \n","16  [dominica, antigua, barbuda, climate, commonwe...   \n","17  [grenada, jamaica, ndc, tobago, emissions, tri...   \n","18  [suriname, cameroon, mauritania, cdn, national...   \n","\n","                                  Representative_Docs  \n","0   [ \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n...  \n","1   [DEMOCRATIC REPUBLIC OF CONGO\\nVice-Primacy\\n ...  \n","2   [ \\n \\n \\n \\n1 \\n \\nUpdate of the \\nNDC of the...  \n","3   [REPUBLIC OF SEYCHELLES\\nSeychelles’ Updated N...  \n","4   [Nationally Determined Contribution\\nNationall...  \n","5   [ \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n...  \n","6   [0 \\n \\n1 \\n \\n \\n \\n2 \\n \\n \\n  Executive Sum...  \n","7   [In accordance with decision No. 1/CP.21, para...  \n","8   [2 \\nThe Republic of Uzbekistan, being committ...  \n","9   [UPDATED NATIONALLY \\nDETERMINED CONTRIBUTION\\...  \n","10  [1 \\n \\n \\n \\n \\n \\n \\nBotswana’s 2nd Updated ...  \n","11  [Update of the First Nationally  \\nDetermined ...  \n","12  [Nationally Determined Contribution (NDC)\\nof ...  \n","13  [Nationally Determined Contribution\\n From MON...  \n","14  [MALAYSIA’S UPDATE OF ITS FIRST\\nNATIONALLY DE...  \n","15  [Nationally Determined\\nat national level\\nCDN...  \n","16  [REPUBLIC OF THE PHILIPPINES\\nNationally Deter...  \n","17  [TRINIDAD AND TOBAGO\\nINTENDED NATIONALLY DETE...  \n","18  [The Republic of Suriname\\nNationally Determin...  "]},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":["# prompt: Can you help me ask it if is able to find any topic words?\n","\n","# Get the topic info\n","topic_info = topic_model.get_topic_info()\n","\n","# Print the topic info DataFrame to see if any topic words are present\n","topic_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hg966Nfkf5de"},"outputs":[],"source":["#perhaps to add\n","# Train our topic model with BERTopic\n","topic_model = BERTopic(\n","    embedding_model=model,\n","    umap_model=umap_model,\n","    hdbscan_model=hdbscan_model,\n","    vectorizer_model=vectorizer,\n","    verbose=True\n",").fit(documents, document_vectors)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A3Gfin52z8vn"},"outputs":[],"source":["# prompt: can I see these plots?\n","\n","# ... (your existing code) ...\n","\n","# Get the top 10 words for each topic\n","topics = topic_model.get_topic_info()\n","for topic_num in topics[topics[\"Topic\"] != -1][\"Topic\"]:\n","    topic_words = topic_model.get_topic(topic_num)\n","    if topic_words:  # Check if the topic has words\n","        top_words = [word for word, prob in topic_words[:10]]\n","        probs = [prob for word, prob in topic_words[:10]]\n","\n","        # Create a bar chart\n","        plt.figure(figsize=(10, 6))  # Adjust figure size as needed\n","        plt.bar(top_words, probs)\n","        plt.xlabel(\"Words\")\n","        plt.ylabel(\"Probability\")\n","        plt.title(f\"Top 10 Words for Topic {topic_num}\")\n","        plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for readability\n","        plt.tight_layout()  # Adjust layout to prevent labels from overlapping\n","        plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jbc0yEGp0LVo"},"outputs":[],"source":["topics = topic_model.get_topic_info()\n","for topic_num in topics[topics[\"Topic\"] != -1][\"Topic\"]:\n","    topic_words = topic_model.get_topic(topic_num)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"elapsed":42,"status":"error","timestamp":1745750082290,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"VYpeRojM0BTU","outputId":"c2287391-3e37-4e7d-ff6d-7b97c97ae119"},"outputs":[{"ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-15-85d1e57f117e>, line 1)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-15-85d1e57f117e>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    df plt.show()\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}],"source":["df plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"executionInfo":{"elapsed":65,"status":"error","timestamp":1745749972068,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"5eCGSPimnq_z","outputId":"1f3416bd-dbf6-4d3d-9b75-7ad4e77d5c8d"},"outputs":[{"ename":"NameError","evalue":"name 'df' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-092c0085ffd6>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"text_content\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}],"source":["df[\"text_content\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oreaX5tepWXJ"},"outputs":[],"source":["documents = list(df[\"text_content\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":52,"status":"ok","timestamp":1745747296231,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"D_Kq-FFBpZ7J","outputId":"abcfda3a-8aa7-4808-b213-714505bd8d8f"},"outputs":[{"data":{"text/plain":["13"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["len(documents)"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27193,"status":"error","timestamp":1746605044437,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"FmFSXWM8ohEL","outputId":"a60ed572-bc69-4779-c5ec-dbd8ba0362f8"},"outputs":[{"output_type":"display_data","data":{"text/plain":["modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0c24ea4ecc514771b32ca0637217ed43"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1f08e438b78b4a1a829b363bb2812d44"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["README.md:   0%|          | 0.00/10.5k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b0199fb329b247b3a0537ba79e3dd917"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"024243dded8649ab88f111e1da956d3c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/612 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ba90c0f47bd7461f91361cd5e3f82448"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n","WARNING:huggingface_hub.file_download:Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`\n"]},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"500e0bea0fd24b8cbd97262415c06552"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer_config.json:   0%|          | 0.00/350 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fd0abbeee4104ebea34a749ee97888cd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"aa412304ea734ab4b395dc92edd203ed"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"570ca29f88d24d20870dbfcb5b6bda59"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7f4375f20b344c47a913b2982849aff4"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0fd1e8a1b369490ea325ed9bbffec140"}},"metadata":{}},{"output_type":"error","ename":"NameError","evalue":"name 'documents' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-a294ff49527c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m## first, embed the documents\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSentenceTransformer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"all-MiniLM-L6-v2\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdocument_vectors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdocuments\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mshow_progress_bar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'documents' is not defined"]}],"source":["## first, embed the documents\n","model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n","document_vectors = model.encode(documents,show_progress_bar=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4JP7MR6Sph34"},"outputs":[],"source":["umap_model = UMAP(n_neighbors=15, n_components=5, min_dist=0.01, metric='cosine', random_state=42)\n","hdbscan_model = HDBSCAN(min_cluster_size=70, metric='euclidean', cluster_selection_method='eom')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tVquSa9aqKx3"},"outputs":[],"source":["vectorizer = CountVectorizer(stop_words='english')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":115},"executionInfo":{"elapsed":59,"status":"ok","timestamp":1745748944547,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"qpY1DQc6qPwd","outputId":"46873893-ee73-4943-f924-4530f92186f0"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"topic_model\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Topic\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -1,\n        \"max\": -1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 177,\n        \"max\": 177,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          177\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"-1_cid_climate_change_national\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Representation\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Representative_Docs\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-ff866671-3c41-4fa9-9244-90513657f41a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Topic</th>\n","      <th>Count</th>\n","      <th>Name</th>\n","      <th>Representation</th>\n","      <th>Representative_Docs</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-1</td>\n","      <td>177</td>\n","      <td>-1_cid_climate_change_national</td>\n","      <td>[cid, climate, change, national, emissions, en...</td>\n","      <td>[ \\n \\n \\n \\nPublished by:  \\nThe General Secr...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff866671-3c41-4fa9-9244-90513657f41a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ff866671-3c41-4fa9-9244-90513657f41a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ff866671-3c41-4fa9-9244-90513657f41a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"text/plain":["   Topic  Count                            Name  \\\n","0     -1    177  -1_cid_climate_change_national   \n","\n","                                      Representation  \\\n","0  [cid, climate, change, national, emissions, en...   \n","\n","                                 Representative_Docs  \n","0  [ \\n \\n \\n \\nPublished by:  \\nThe General Secr...  "]},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":["topic_model.get_topic_info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SWZDhHhzwk-T"},"outputs":[],"source":["documents = list(df['text_content'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":66,"status":"ok","timestamp":1745749207996,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"FuVmm7_Ewtak","outputId":"6c8a072a-5051-4b4f-cd85-9e7837254915"},"outputs":[{"data":{"text/plain":["13"]},"execution_count":45,"metadata":{},"output_type":"execute_result"}],"source":["len(documents)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u0UKxjQPw0q5"},"outputs":[],"source":["umap_model = UMAP(n_neighbors=15, n_components=5, min_dist=0.01, metric='cosine', random_state=42)\n","hdbscan_model = HDBSCAN(min_cluster_size=70, metric='euclidean', cluster_selection_method='eom')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cV7ceyMIw-ml"},"outputs":[],"source":["vectorizer = CountVectorizer(stop_words='english')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"elapsed":334,"status":"error","timestamp":1745749284073,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"vSYKguc0w_gc","outputId":"ae4bd362-dcbd-48de-e45a-e55b4c40a6b4"},"outputs":[{"ename":"ValueError","evalue":"Make sure that the embeddings are a numpy array with shape: (len(docs), vector_dim) where vector_dim is the dimensionality of the vector embeddings. ","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-a450371a9b25>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mvectorizer_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvectorizer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m ).fit(documents, document_vectors)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/bertopic/_bertopic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, documents, embeddings, images, y)\u001b[0m\n\u001b[1;32m    385\u001b[0m         \u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m         \"\"\"\n\u001b[0;32m--> 387\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdocuments\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdocuments\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0membeddings\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0membeddings\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    388\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/bertopic/_bertopic.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, documents, embeddings, images, y)\u001b[0m\n\u001b[1;32m    443\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdocuments\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    444\u001b[0m             \u001b[0mcheck_documents_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdocuments\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 445\u001b[0;31m             \u001b[0mcheck_embeddings_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0membeddings\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdocuments\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    446\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    447\u001b[0m         \u001b[0mdoc_ids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdocuments\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mdocuments\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/bertopic/_utils.py\u001b[0m in \u001b[0;36mcheck_embeddings_shape\u001b[0;34m(embeddings, docs)\u001b[0m\n\u001b[1;32m     56\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0membeddings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdocs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m                 raise ValueError(\n\u001b[0m\u001b[1;32m     59\u001b[0m                     \u001b[0;34m\"Make sure that the embeddings are a numpy array with shape: \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m                     \u001b[0;34m\"(len(docs), vector_dim) where vector_dim is the dimensionality \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Make sure that the embeddings are a numpy array with shape: (len(docs), vector_dim) where vector_dim is the dimensionality of the vector embeddings. "]}],"source":["# Train our topic model with BERTopic\n","topic_model = BERTopic(\n","    embedding_model=model,\n","    umap_model=umap_model,\n","    hdbscan_model=hdbscan_model,\n","    vectorizer_model=vectorizer,\n","    verbose=True\n",").fit(documents, document_vectors)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4030,"status":"ok","timestamp":1745829506206,"user":{"displayName":"Maëlle LEFEUVRE","userId":"00129828237083989040"},"user_tz":-120},"id":"gJ44_K6sqRgY","outputId":"2008e6e2-9acf-430a-d6b8-b1365528d993"},"outputs":[{"data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"bf7b1a6b-05c3-4f3b-8064-0c949f9ebaa3\" class=\"plotly-graph-div\" style=\"height:1250px; width:1000px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"bf7b1a6b-05c3-4f3b-8064-0c949f9ebaa3\")) {                    Plotly.newPlot(                        \"bf7b1a6b-05c3-4f3b-8064-0c949f9ebaa3\",                        [{\"marker\":{\"color\":\"#D55E00\"},\"orientation\":\"h\",\"x\":[0.019855205401379118,0.020465299971877255,0.02194663829131691,0.02221870652051414,0.0295299745113922,0.029999379741863424,0.0338778035641637,0.034301924229042276,0.035148594356584954,0.12121108532568663],\"y\":[\"10  \",\"35  \",\"22  \",\"43  \",\"16  \",\"36  \",\"15  \",\"13  \",\"24  \",\"cid  \"],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"marker\":{\"color\":\"#0072B2\"},\"orientation\":\"h\",\"x\":[0.029802859581825932,0.03147453418283564,0.032274963868182065,0.0334875030462651,0.040396066137798205,0.042257453353277234,0.043373211503706245,0.047899397412574006,0.060701225823356623,0.12938370570276964],\"y\":[\"ets  \",\"co2eq  \",\"target  \",\"emissions  \",\"union  \",\"states  \",\"regulation  \",\"member  \",\"european  \",\"eu  \"],\"type\":\"bar\",\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"marker\":{\"color\":\"#CC79A7\"},\"orientation\":\"h\",\"x\":[0.014148549705644707,0.014318157759663925,0.015718811368100112,0.01651516502360464,0.017375314754615723,0.017530271596091097,0.01863450216528195,0.01948167414471561,0.019941092528026404,0.025845727944200255],\"y\":[\"water  \",\"vanuatu  \",\"adaptation  \",\"sector  \",\"energy  \",\"national  \",\"change  \",\"emissions  \",\"ndc  \",\"climate  \"],\"type\":\"bar\",\"xaxis\":\"x3\",\"yaxis\":\"y3\"},{\"marker\":{\"color\":\"#E69F00\"},\"orientation\":\"h\",\"x\":[0.013554849060859554,0.013901446553604762,0.014306036443414199,0.014628529751969313,0.015029023133393863,0.015044923215065857,0.019004005370870457,0.02337436210963622,0.02585098820505146,0.028687660422662475],\"y\":[\"mitigation  \",\"contribution  \",\"management  \",\"development  \",\"sector  \",\"country  \",\"adaptation  \",\"national  \",\"change  \",\"climate  \"],\"type\":\"bar\",\"xaxis\":\"x4\",\"yaxis\":\"y4\"},{\"marker\":{\"color\":\"#56B4E9\"},\"orientation\":\"h\",\"x\":[0.014950881184042286,0.01675732042560089,0.019193260432796715,0.019462255748951014,0.020341144776500765,0.023901055564945498,0.024274773441031666,0.024311633838996767,0.024423707156465288,0.030530855505590114],\"y\":[\"capacity  \",\"png  \",\"ndc  \",\"cambodia  \",\"national  \",\"development  \",\"timor  \",\"leste  \",\"change  \",\"climate  \"],\"type\":\"bar\",\"xaxis\":\"x5\",\"yaxis\":\"y5\"},{\"marker\":{\"color\":\"#009E73\"},\"orientation\":\"h\",\"x\":[0.01666247039095284,0.016740579430852845,0.016924049451002912,0.017230931265853906,0.017710786755358414,0.018405188089410735,0.018927798592509874,0.022031167381462782,0.023861943594734567,0.04907712448499531],\"y\":[\"qatar  \",\"kuwait  \",\"emissions  \",\"national  \",\"egypt  \",\"sector  \",\"climate  \",\"water  \",\"energy  \",\"oman  \"],\"type\":\"bar\",\"xaxis\":\"x6\",\"yaxis\":\"y6\"},{\"marker\":{\"color\":\"#F0E442\"},\"orientation\":\"h\",\"x\":[0.01578610549654126,0.0161083782513581,0.017526648438439853,0.018053472092567066,0.01993797100589672,0.02070602417783661,0.029436060486454394,0.029675669439910332,0.029799728417861434,0.0325943455454709],\"y\":[\"emissions  \",\"sector  \",\"national  \",\"energy  \",\"change  \",\"development  \",\"republic  \",\"climate  \",\"adaptation  \",\"moldova  \"],\"type\":\"bar\",\"xaxis\":\"x7\",\"yaxis\":\"y7\"},{\"marker\":{\"color\":\"#D55E00\"},\"orientation\":\"h\",\"x\":[0.023294262630518307,0.02358547222821575,0.023750494455531068,0.024402800369934734,0.02543709258801976,0.0262350058675027,0.027461954964684756,0.0277216311895321,0.029485901486654267,0.035092578547216376],\"y\":[\"measures  \",\"change  \",\"ghg  \",\"emissions  \",\"republic  \",\"development  \",\"climate  \",\"tajikistan  \",\"türkiye  \",\"turkmenistan  \"],\"type\":\"bar\",\"xaxis\":\"x8\",\"yaxis\":\"y8\"},{\"marker\":{\"color\":\"#0072B2\"},\"orientation\":\"h\",\"x\":[0.017922823846243628,0.018117177201005003,0.018290006719667233,0.01843332552352163,0.01857337973319708,0.018875124905756758,0.019984774030117596,0.020677590669957925,0.022311409149610797,0.023784573414739545],\"y\":[\"adaptation  \",\"leone  \",\"emissions  \",\"namibia  \",\"sierra  \",\"sector  \",\"ndc  \",\"2030  \",\"climate  \",\"liberia  \"],\"type\":\"bar\",\"xaxis\":\"x9\",\"yaxis\":\"y9\"},{\"marker\":{\"color\":\"#CC79A7\"},\"orientation\":\"h\",\"x\":[0.01901379847595222,0.019086293100985197,0.01966545948376702,0.019995768544253473,0.019997384027418512,0.023639439745612726,0.026640380594339583,0.026980556887698876,0.02887907328753984,0.033285462615920004],\"y\":[\"country  \",\"sector  \",\"national  \",\"emissions  \",\"energy  \",\"gambia  \",\"climate  \",\"mitigation  \",\"gabon  \",\"uganda  \"],\"type\":\"bar\",\"xaxis\":\"x10\",\"yaxis\":\"y10\"},{\"marker\":{\"color\":\"#E69F00\"},\"orientation\":\"h\",\"x\":[0.017398418165807356,0.017518208878740282,0.018080597176670658,0.018466959002701948,0.018581838299317623,0.018632937091077446,0.022704740286910018,0.024690174008735126,0.026005705465508882,0.037622570392019654],\"y\":[\"adaptation  \",\"updated  \",\"national  \",\"tunisia  \",\"change  \",\"mitigation  \",\"climate  \",\"ndc  \",\"mozambique  \",\"malawi  \"],\"type\":\"bar\",\"xaxis\":\"x11\",\"yaxis\":\"y11\"},{\"marker\":{\"color\":\"#56B4E9\"},\"orientation\":\"h\",\"x\":[0.026967091238393533,0.027450166129606306,0.02793230031809888,0.028434025363486028,0.030618650863610975,0.031005362595871472,0.032734986164997745,0.03295729488888192,0.044907753755370344,0.07574981920058382],\"y\":[\"agreement  \",\"emissions  \",\"carbon  \",\"norway  \",\"ndc  \",\"neutrality  \",\"montenegro  \",\"target  \",\"republic  \",\"korea  \"],\"type\":\"bar\",\"xaxis\":\"x12\",\"yaxis\":\"y12\"},{\"marker\":{\"color\":\"#009E73\"},\"orientation\":\"h\",\"x\":[0.02423802157700698,0.02435000530025728,0.024629152473964595,0.024630638590451052,0.0248142340096145,0.024992699070042236,0.02710945515371856,0.02801777030881469,0.03920361095141947,0.07200833971011104],\"y\":[\"target  \",\"indigenous  \",\"federal  \",\"clean  \",\"2035  \",\"carbon  \",\"climate  \",\"zero  \",\"emissions  \",\"canada  \"],\"type\":\"bar\",\"xaxis\":\"x13\",\"yaxis\":\"y13\"},{\"marker\":{\"color\":\"#F0E442\"},\"orientation\":\"h\",\"x\":[0.021591846424532178,0.02161509710750759,0.021873987599433285,0.023267307766114638,0.023842550109351084,0.025776745568045156,0.029969354560027885,0.03427279642013679,0.03572918590345942,0.08465316182741572],\"y\":[\"fy  \",\"article  \",\"energy  \",\"including  \",\"global  \",\"emissions  \",\"thailand  \",\"japan  \",\"malaysia  \",\"singapore  \"],\"type\":\"bar\",\"xaxis\":\"x14\",\"yaxis\":\"y14\"},{\"marker\":{\"color\":\"#D55E00\"},\"orientation\":\"h\",\"x\":[0.015979434631735408,0.016682536308963984,0.016736279045164604,0.018214458120224906,0.01865468756001447,0.020870599691385213,0.02116229257800878,0.022148039127333565,0.027332538897381173,0.05917052363627718],\"y\":[\"adaptation  \",\"emissions  \",\"2030  \",\"development  \",\"energy  \",\"ndc  \",\"guinea  \",\"climate  \",\"bissau  \",\"myanmar  \"],\"type\":\"bar\",\"xaxis\":\"x15\",\"yaxis\":\"y15\"},{\"marker\":{\"color\":\"#0072B2\"},\"orientation\":\"h\",\"x\":[0.018455631346453887,0.018494963565138908,0.01918319713031167,0.01948534775945081,0.02269212743382676,0.023280867275993482,0.029308073427302385,0.052843605626121705,0.05413027608182253,0.06884017417479249],\"y\":[\"energy  \",\"determined  \",\"nationally  \",\"resilience  \",\"development  \",\"commonwealth  \",\"climate  \",\"barbuda  \",\"antigua  \",\"dominica  \"],\"type\":\"bar\",\"xaxis\":\"x16\",\"yaxis\":\"y16\"},{\"marker\":{\"color\":\"#CC79A7\"},\"orientation\":\"h\",\"x\":[0.02027502824590512,0.021453515746995326,0.02179891977096018,0.022100248727633255,0.034903699625650195,0.03683573164758246,0.03803515356341803,0.04635922933044164,0.08288539933215866,0.08415704824102627],\"y\":[\"sectors  \",\"article  \",\"agreement  \",\"page  \",\"trinidad  \",\"emissions  \",\"tobago  \",\"ndc  \",\"jamaica  \",\"grenada  \"],\"type\":\"bar\",\"xaxis\":\"x17\",\"yaxis\":\"y17\"},{\"marker\":{\"color\":\"#E69F00\"},\"orientation\":\"h\",\"x\":[0.019403895104776768,0.019904416109962852,0.021184866814338236,0.02132180644636805,0.022996296987989846,0.02427145377855662,0.027102990725984176,0.03461989517784664,0.0381323358569372,0.04434704795400335],\"y\":[\"2021  \",\"2030  \",\"ndc  \",\"climate  \",\"development  \",\"national  \",\"cdn  \",\"mauritania  \",\"cameroon  \",\"suriname  \"],\"type\":\"bar\",\"xaxis\":\"x18\",\"yaxis\":\"y18\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#C8D4E3\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.175],\"showgrid\":true},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.8639999999999999,0.9999999999999999],\"showgrid\":true},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.275,0.45],\"showgrid\":true},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.8639999999999999,0.9999999999999999],\"showgrid\":true},\"xaxis3\":{\"anchor\":\"y3\",\"domain\":[0.55,0.7250000000000001],\"showgrid\":true},\"yaxis3\":{\"anchor\":\"x3\",\"domain\":[0.8639999999999999,0.9999999999999999],\"showgrid\":true},\"xaxis4\":{\"anchor\":\"y4\",\"domain\":[0.825,1.0],\"showgrid\":true},\"yaxis4\":{\"anchor\":\"x4\",\"domain\":[0.8639999999999999,0.9999999999999999],\"showgrid\":true},\"xaxis5\":{\"anchor\":\"y5\",\"domain\":[0.0,0.175],\"showgrid\":true},\"yaxis5\":{\"anchor\":\"x5\",\"domain\":[0.6479999999999999,0.7839999999999999],\"showgrid\":true},\"xaxis6\":{\"anchor\":\"y6\",\"domain\":[0.275,0.45],\"showgrid\":true},\"yaxis6\":{\"anchor\":\"x6\",\"domain\":[0.6479999999999999,0.7839999999999999],\"showgrid\":true},\"xaxis7\":{\"anchor\":\"y7\",\"domain\":[0.55,0.7250000000000001],\"showgrid\":true},\"yaxis7\":{\"anchor\":\"x7\",\"domain\":[0.6479999999999999,0.7839999999999999],\"showgrid\":true},\"xaxis8\":{\"anchor\":\"y8\",\"domain\":[0.825,1.0],\"showgrid\":true},\"yaxis8\":{\"anchor\":\"x8\",\"domain\":[0.6479999999999999,0.7839999999999999],\"showgrid\":true},\"xaxis9\":{\"anchor\":\"y9\",\"domain\":[0.0,0.175],\"showgrid\":true},\"yaxis9\":{\"anchor\":\"x9\",\"domain\":[0.43199999999999994,0.568],\"showgrid\":true},\"xaxis10\":{\"anchor\":\"y10\",\"domain\":[0.275,0.45],\"showgrid\":true},\"yaxis10\":{\"anchor\":\"x10\",\"domain\":[0.43199999999999994,0.568],\"showgrid\":true},\"xaxis11\":{\"anchor\":\"y11\",\"domain\":[0.55,0.7250000000000001],\"showgrid\":true},\"yaxis11\":{\"anchor\":\"x11\",\"domain\":[0.43199999999999994,0.568],\"showgrid\":true},\"xaxis12\":{\"anchor\":\"y12\",\"domain\":[0.825,1.0],\"showgrid\":true},\"yaxis12\":{\"anchor\":\"x12\",\"domain\":[0.43199999999999994,0.568],\"showgrid\":true},\"xaxis13\":{\"anchor\":\"y13\",\"domain\":[0.0,0.175],\"showgrid\":true},\"yaxis13\":{\"anchor\":\"x13\",\"domain\":[0.21599999999999997,0.352],\"showgrid\":true},\"xaxis14\":{\"anchor\":\"y14\",\"domain\":[0.275,0.45],\"showgrid\":true},\"yaxis14\":{\"anchor\":\"x14\",\"domain\":[0.21599999999999997,0.352],\"showgrid\":true},\"xaxis15\":{\"anchor\":\"y15\",\"domain\":[0.55,0.7250000000000001],\"showgrid\":true},\"yaxis15\":{\"anchor\":\"x15\",\"domain\":[0.21599999999999997,0.352],\"showgrid\":true},\"xaxis16\":{\"anchor\":\"y16\",\"domain\":[0.825,1.0],\"showgrid\":true},\"yaxis16\":{\"anchor\":\"x16\",\"domain\":[0.21599999999999997,0.352],\"showgrid\":true},\"xaxis17\":{\"anchor\":\"y17\",\"domain\":[0.0,0.175],\"showgrid\":true},\"yaxis17\":{\"anchor\":\"x17\",\"domain\":[0.0,0.13599999999999998],\"showgrid\":true},\"xaxis18\":{\"anchor\":\"y18\",\"domain\":[0.275,0.45],\"showgrid\":true},\"yaxis18\":{\"anchor\":\"x18\",\"domain\":[0.0,0.13599999999999998],\"showgrid\":true},\"xaxis19\":{\"anchor\":\"y19\",\"domain\":[0.55,0.7250000000000001],\"showgrid\":true},\"yaxis19\":{\"anchor\":\"x19\",\"domain\":[0.0,0.13599999999999998],\"showgrid\":true},\"xaxis20\":{\"anchor\":\"y20\",\"domain\":[0.825,1.0],\"showgrid\":true},\"yaxis20\":{\"anchor\":\"x20\",\"domain\":[0.0,0.13599999999999998],\"showgrid\":true},\"annotations\":[{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 0\",\"x\":0.0875,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 1\",\"x\":0.36250000000000004,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 2\",\"x\":0.6375000000000001,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 3\",\"x\":0.9125,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 4\",\"x\":0.0875,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.7839999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 5\",\"x\":0.36250000000000004,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.7839999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 6\",\"x\":0.6375000000000001,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.7839999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 7\",\"x\":0.9125,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.7839999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 8\",\"x\":0.0875,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.568,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 9\",\"x\":0.36250000000000004,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.568,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 10\",\"x\":0.6375000000000001,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.568,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 11\",\"x\":0.9125,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.568,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 12\",\"x\":0.0875,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.352,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 13\",\"x\":0.36250000000000004,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.352,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 14\",\"x\":0.6375000000000001,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.352,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 15\",\"x\":0.9125,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.352,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 16\",\"x\":0.0875,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.13599999999999998,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Topic 17\",\"x\":0.36250000000000004,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.13599999999999998,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"title\":{\"font\":{\"size\":22,\"color\":\"Black\"},\"text\":\"Topic Word Scores\",\"x\":0.5,\"xanchor\":\"center\",\"yanchor\":\"top\"},\"hoverlabel\":{\"font\":{\"size\":16,\"family\":\"Rockwell\"},\"bgcolor\":\"white\"},\"showlegend\":false,\"width\":1000,\"height\":1250},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('bf7b1a6b-05c3-4f3b-8064-0c949f9ebaa3');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{},"output_type":"display_data"}],"source":["topic_model.visualize_barchart(top_n_topics=70,n_words=10)"]}],"metadata":{"colab":{"provenance":[{"file_id":"1Se9SAbqi7HvUs2huhArZLYitGoweU4vj","timestamp":1745749346440},{"file_id":"1hSZMbGoudcDbZEmhhwyEmD4tnXPv9mCc","timestamp":1744718875415},{"file_id":"1huNM92E_-vwj2rfJk3CZr7IdNblFYjYH","timestamp":1744532282985}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{}}},"nbformat":4,"nbformat_minor":0}